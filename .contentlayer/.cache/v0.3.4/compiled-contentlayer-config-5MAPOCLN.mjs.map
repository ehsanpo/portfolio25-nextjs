{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files'\n\nexport const Blog = defineDocumentType(() => ({\n  name: 'Blog',\n  filePathPattern: `blog/**/*.md`,\n  fields: {\n    title: { type: 'string', required: true },\n    date: { type: 'date', required: true },\n    summary: { type: 'string', required: true },\n    tags: { type: 'list', of: { type: 'string' } },\n    cover: { type: 'string' },\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\..*\\.md$/, '').replace(/\\.md$/, ''),\n    },\n    lang: {\n      type: 'string',\n      resolve: (doc) => {\n        if (doc._raw.sourceFileName.endsWith('.sv.md')) return 'sv'\n        if (doc._raw.sourceFileName.endsWith('.fa.md')) return 'fa'\n        return 'en'\n      },\n    },\n  },\n}))\n\nexport const Portfolio = defineDocumentType(() => ({\n  name: 'Portfolio',\n  filePathPattern: `portfolio/**/*.md`,\n  fields: {\n    title: { type: 'string', required: true },\n    date: { type: 'date', required: true },\n    status: { type: 'string' },\n    permalink: { type: 'string' },\n    author: { type: 'string' },\n    type: { type: 'string' },\n    id: { type: 'number' },\n    agency: { type: 'string' },\n    category: { type: 'list', of: { type: 'string' } },\n    tag: { type: 'list', of: { type: 'string' } },\n    case_link_url: { type: 'string' },\n    client: { type: 'string' },\n    tagline: { type: 'string' },\n    background_image: { type: 'string' },\n    logo: { type: 'string' },\n    images: { type: 'list', of: { type: 'string' } },\n    port_date: { type: 'list', of: { type: 'string' } },\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: (doc) => {\n        const pathParts = doc._raw.flattenedPath.split('/')\n        return pathParts[pathParts.length - 2] // Get parent folder name\n      },\n    },\n    lang: {\n      type: 'string',\n      resolve: (doc) => {\n        if (doc._raw.sourceFileName.endsWith('.sv.md')) return 'sv'\n        if (doc._raw.sourceFileName.endsWith('.fa.md')) return 'fa'\n        return 'en'\n      },\n    },\n  },\n}))\n\nexport default makeSource({\n  contentDirPath: 'src/content',\n  documentTypes: [Blog, Portfolio],\n})\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAExC,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACrC,SAAS,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC1C,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,EAAE;AAAA,IAC7C,OAAO,EAAE,MAAM,SAAS;AAAA,EAC1B;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,KAAK,eAAe,QAAQ,aAAa,EAAE,EAAE,QAAQ,SAAS,EAAE;AAAA,IACxF;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ;AAChB,YAAI,IAAI,KAAK,eAAe,SAAS,QAAQ;AAAG,iBAAO;AACvD,YAAI,IAAI,KAAK,eAAe,SAAS,QAAQ;AAAG,iBAAO;AACvD,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AACF,EAAE;AAEK,IAAM,YAAY,mBAAmB,OAAO;AAAA,EACjD,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACrC,QAAQ,EAAE,MAAM,SAAS;AAAA,IACzB,WAAW,EAAE,MAAM,SAAS;AAAA,IAC5B,QAAQ,EAAE,MAAM,SAAS;AAAA,IACzB,MAAM,EAAE,MAAM,SAAS;AAAA,IACvB,IAAI,EAAE,MAAM,SAAS;AAAA,IACrB,QAAQ,EAAE,MAAM,SAAS;AAAA,IACzB,UAAU,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,EAAE;AAAA,IACjD,KAAK,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,EAAE;AAAA,IAC5C,eAAe,EAAE,MAAM,SAAS;AAAA,IAChC,QAAQ,EAAE,MAAM,SAAS;AAAA,IACzB,SAAS,EAAE,MAAM,SAAS;AAAA,IAC1B,kBAAkB,EAAE,MAAM,SAAS;AAAA,IACnC,MAAM,EAAE,MAAM,SAAS;AAAA,IACvB,QAAQ,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,EAAE;AAAA,IAC/C,WAAW,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,EAAE;AAAA,EACpD;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ;AAChB,cAAM,YAAY,IAAI,KAAK,cAAc,MAAM,GAAG;AAClD,eAAO,UAAU,UAAU,SAAS,CAAC;AAAA,MACvC;AAAA,IACF;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ;AAChB,YAAI,IAAI,KAAK,eAAe,SAAS,QAAQ;AAAG,iBAAO;AACvD,YAAI,IAAI,KAAK,eAAe,SAAS,QAAQ;AAAG,iBAAO;AACvD,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,MAAM,SAAS;AACjC,CAAC;",
  "names": []
}
