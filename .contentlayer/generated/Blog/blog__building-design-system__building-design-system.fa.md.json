{
  "title": "Building a Design System from Scratch",
  "date": "2024-02-20T00:00:00.000Z",
  "summary": "دروس آموخته شده در ایجاد یک سیستم طراحی جامع برای یک استارتاپ در حال رشد",
  "tags": [
    "Design System",
    "React",
    "TypeScript",
    "Documentation"
  ],
  "cover": "featured.jpg",
  "body": {
    "raw": "author: Ehsan Pourhadi\nreadingTime: 8 دقیقه مطالعه\nfeatured: true\n---\n# ساخت یک سیستم طراحی از ابتدا\n\nایجاد یک سیستم طراحی یکی از پروژه‌های بسیار پاداش‌دهنده و در عین حال چالش‌برانگیزی است که به عنوان یک توسعه‌دهنده frontend می‌توانید انجام دهید. در اینجا آموخته‌های من در ساخت یکی از این سیستم‌ها از ابتدا را به اشتراک می‌گذارم.\n\n## چرا به یک سیستم طراحی نیاز داشتیم\n\nاستارتاپ ما به سرعت در حال رشد بود و با آن، تیم محصول ما نیز در حال گسترش بود. ما طراحان و توسعه‌دهندگانی داشتیم که بر روی ویژگی‌های مختلف کار می‌کردند، اغلب مؤلفه‌های مشابهی با تفاوت‌های جزئی ایجاد می‌کردند. این موضوع منجر به:\n\n- رابط کاربری ناهمگون\n- کد و تلاش تکراری\n- چرخه‌های توسعه کندتر\n- کابوس‌های نگهداری\n\nواضح بود که ما به یک رویکرد سیستماتیک نیاز داریم.\n\n## مرحله برنامه‌ریزی\n\nقبل از نوشتن هرگونه کد، ما زمان قابل توجهی را برای برنامه‌ریزی صرف کردیم:\n\n### 1. بررسی مؤلفه‌های موجود\nما هر عنصر UI در محصولات ما را کاتالوگ کردیم، الگوها و ناهمگونی‌ها را شناسایی کردیم.\n\n### 2. تعریف توکن‌های طراحی\nما توکن‌های اصلی طراحی خود را تعیین کردیم:\n- رنگ‌ها (اصلی، ثانویه، معنایی)\n- تایپوگرافی (خانواده‌های فونت، اندازه‌ها، وزن‌ها)\n- فاصله‌گذاری (حاشیه‌ها، پدینگ، فاصله‌ها)\n- حاشیه‌ها و سایه‌ها\n- مدت زمان‌ها و رفت و برگشت‌های انیمیشن\n\n### 3. سلسله مراتب مؤلفه\nما مؤلفه‌ها را در سه سطح سازماندهی کردیم:\n- **Atoms**: عناصر اصلی (دکمه‌ها، ورودی‌ها، برچسب‌ها)\n- **Molecules**: ترکیبات ساده (فیلدهای فرم، نوارهای جستجو)\n- **Organisms**: مؤلفه‌های پیچیده (سربرگ‌ها، کارت‌ها، فرم‌ها)\n\n## استراتژی پیاده‌سازی\n\n### انتخاب‌های فناوری\n\nما انتخاب کردیم:\n- **React** با TypeScript برای ایمنی نوع\n- **CSS-in-JS** با styled-components برای استایلینگ پویا\n- **Storybook** برای مستندات و تست\n- **Jest** و Testing Library برای تست‌های واحد\n\n### متغیرهای CSS برای تم\n\nبه جای سخت‌کد کردن مقادیر، ما از ویژگی‌های سفارشی CSS استفاده کردیم:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-primary-hover: #2563eb;\n  --spacing-xs: 0.25rem;\n  --spacing-sm: 0.5rem;\n  --border-radius: 0.375rem;\n}\n```\n\nاین رویکرد پیاده‌سازی تم و حالت تاریک را بسیار آسان‌تر کرد.\n\n### طراحی API مؤلفه\n\nما بر ایجاد API‌های پیش‌بینی‌پذیر و یکنواخت تمرکز کردیم:\n\n```typescript\ninterface ButtonProps {\n  variant?: 'primary' | 'secondary' | 'outline';\n  size?: 'sm' | 'md' | 'lg';\n  disabled?: boolean;\n  loading?: boolean;\n  children: React.ReactNode;\n}\n```\n\n## چالش‌هایی که با آن‌ها روبرو شدیم\n\n### 1. کسب حمایت از تیم‌ها\nهمه به سرعت ارزش آن را ندیدند. ما مجبور شدیم با استفاده از نمونه‌های اولیه منافع را نشان دهیم و تدریجا مؤلفه‌های موجود را مهاجرت دهیم.\n\n### 2. تعادل بین انعطاف‌پذیری در مقابل یکنواختی\nاگر سیستم بیش از حد سخت باشد، توسعه‌دهندگان دور آن کار می‌کنند. اگر بیش از حد انعطاف‌پذیر باشد، شما یکنواختی را از دست می‌دهید. پیدا کردن تعادل مناسب نیاز به تکرار داشت.\n\n### 3. مستندات\nبه‌روزرسانی مستندات بسیار حیاتی است اما اغلب نادیده گرفته می‌شود. ما به حد امکان اتوماسیون ایجاد کردیم و آن را بخشی از فرآیند توسعه خود قرار دادیم.\n\n## نتایج و تأثیر\n\nپس از 6 ماه استفاده تدریجی:\n\n- توسعه مؤلفه **50% سریع‌تر**\n- **کاهش 90%** در ناهمگونی‌های طراحی\n- **دسترسی بهبود یافته** در تمام محصولات\n- **تجربه بهتر توسعه‌دهنده** با پشتیبانی TypeScript\n\n## درس‌های آموخته شده\n\n1. **کوچک ش\n",
    "html": "<h2>author: Ehsan Pourhadi\nreadingTime: 8 دقیقه مطالعه\nfeatured: true</h2>\n<h1>ساخت یک سیستم طراحی از ابتدا</h1>\n<p>ایجاد یک سیستم طراحی یکی از پروژه‌های بسیار پاداش‌دهنده و در عین حال چالش‌برانگیزی است که به عنوان یک توسعه‌دهنده frontend می‌توانید انجام دهید. در اینجا آموخته‌های من در ساخت یکی از این سیستم‌ها از ابتدا را به اشتراک می‌گذارم.</p>\n<h2>چرا به یک سیستم طراحی نیاز داشتیم</h2>\n<p>استارتاپ ما به سرعت در حال رشد بود و با آن، تیم محصول ما نیز در حال گسترش بود. ما طراحان و توسعه‌دهندگانی داشتیم که بر روی ویژگی‌های مختلف کار می‌کردند، اغلب مؤلفه‌های مشابهی با تفاوت‌های جزئی ایجاد می‌کردند. این موضوع منجر به:</p>\n<ul>\n<li>رابط کاربری ناهمگون</li>\n<li>کد و تلاش تکراری</li>\n<li>چرخه‌های توسعه کندتر</li>\n<li>کابوس‌های نگهداری</li>\n</ul>\n<p>واضح بود که ما به یک رویکرد سیستماتیک نیاز داریم.</p>\n<h2>مرحله برنامه‌ریزی</h2>\n<p>قبل از نوشتن هرگونه کد، ما زمان قابل توجهی را برای برنامه‌ریزی صرف کردیم:</p>\n<h3>1. بررسی مؤلفه‌های موجود</h3>\n<p>ما هر عنصر UI در محصولات ما را کاتالوگ کردیم، الگوها و ناهمگونی‌ها را شناسایی کردیم.</p>\n<h3>2. تعریف توکن‌های طراحی</h3>\n<p>ما توکن‌های اصلی طراحی خود را تعیین کردیم:</p>\n<ul>\n<li>رنگ‌ها (اصلی، ثانویه، معنایی)</li>\n<li>تایپوگرافی (خانواده‌های فونت، اندازه‌ها، وزن‌ها)</li>\n<li>فاصله‌گذاری (حاشیه‌ها، پدینگ، فاصله‌ها)</li>\n<li>حاشیه‌ها و سایه‌ها</li>\n<li>مدت زمان‌ها و رفت و برگشت‌های انیمیشن</li>\n</ul>\n<h3>3. سلسله مراتب مؤلفه</h3>\n<p>ما مؤلفه‌ها را در سه سطح سازماندهی کردیم:</p>\n<ul>\n<li><strong>Atoms</strong>: عناصر اصلی (دکمه‌ها، ورودی‌ها، برچسب‌ها)</li>\n<li><strong>Molecules</strong>: ترکیبات ساده (فیلدهای فرم، نوارهای جستجو)</li>\n<li><strong>Organisms</strong>: مؤلفه‌های پیچیده (سربرگ‌ها، کارت‌ها، فرم‌ها)</li>\n</ul>\n<h2>استراتژی پیاده‌سازی</h2>\n<h3>انتخاب‌های فناوری</h3>\n<p>ما انتخاب کردیم:</p>\n<ul>\n<li><strong>React</strong> با TypeScript برای ایمنی نوع</li>\n<li><strong>CSS-in-JS</strong> با styled-components برای استایلینگ پویا</li>\n<li><strong>Storybook</strong> برای مستندات و تست</li>\n<li><strong>Jest</strong> و Testing Library برای تست‌های واحد</li>\n</ul>\n<h3>متغیرهای CSS برای تم</h3>\n<p>به جای سخت‌کد کردن مقادیر، ما از ویژگی‌های سفارشی CSS استفاده کردیم:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-primary-hover: #2563eb;\n  --spacing-xs: 0.25rem;\n  --spacing-sm: 0.5rem;\n  --border-radius: 0.375rem;\n}\n</code></pre>\n<p>این رویکرد پیاده‌سازی تم و حالت تاریک را بسیار آسان‌تر کرد.</p>\n<h3>طراحی API مؤلفه</h3>\n<p>ما بر ایجاد API‌های پیش‌بینی‌پذیر و یکنواخت تمرکز کردیم:</p>\n<pre><code class=\"language-typescript\">interface ButtonProps {\n  variant?: 'primary' | 'secondary' | 'outline';\n  size?: 'sm' | 'md' | 'lg';\n  disabled?: boolean;\n  loading?: boolean;\n  children: React.ReactNode;\n}\n</code></pre>\n<h2>چالش‌هایی که با آن‌ها روبرو شدیم</h2>\n<h3>1. کسب حمایت از تیم‌ها</h3>\n<p>همه به سرعت ارزش آن را ندیدند. ما مجبور شدیم با استفاده از نمونه‌های اولیه منافع را نشان دهیم و تدریجا مؤلفه‌های موجود را مهاجرت دهیم.</p>\n<h3>2. تعادل بین انعطاف‌پذیری در مقابل یکنواختی</h3>\n<p>اگر سیستم بیش از حد سخت باشد، توسعه‌دهندگان دور آن کار می‌کنند. اگر بیش از حد انعطاف‌پذیر باشد، شما یکنواختی را از دست می‌دهید. پیدا کردن تعادل مناسب نیاز به تکرار داشت.</p>\n<h3>3. مستندات</h3>\n<p>به‌روزرسانی مستندات بسیار حیاتی است اما اغلب نادیده گرفته می‌شود. ما به حد امکان اتوماسیون ایجاد کردیم و آن را بخشی از فرآیند توسعه خود قرار دادیم.</p>\n<h2>نتایج و تأثیر</h2>\n<p>پس از 6 ماه استفاده تدریجی:</p>\n<ul>\n<li>توسعه مؤلفه <strong>50% سریع‌تر</strong></li>\n<li><strong>کاهش 90%</strong> در ناهمگونی‌های طراحی</li>\n<li><strong>دسترسی بهبود یافته</strong> در تمام محصولات</li>\n<li><strong>تجربه بهتر توسعه‌دهنده</strong> با پشتیبانی TypeScript</li>\n</ul>\n<h2>درس‌های آموخته شده</h2>\n<ol>\n<li>**کوچک ش</li>\n</ol>"
  },
  "_id": "blog/building-design-system/building-design-system.fa.md",
  "_raw": {
    "sourceFilePath": "blog/building-design-system/building-design-system.fa.md",
    "sourceFileName": "building-design-system.fa.md",
    "sourceFileDir": "blog/building-design-system",
    "contentType": "markdown",
    "flattenedPath": "blog/building-design-system/building-design-system.fa"
  },
  "type": "Blog",
  "slug": "building-design-system",
  "lang": "fa"
}