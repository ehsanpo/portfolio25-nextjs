[
  {
    "title": "Building a Design System from Scratch",
    "date": "2024-02-20T00:00:00.000Z",
    "summary": "دروس آموخته شده در ایجاد یک سیستم طراحی جامع برای یک استارتاپ در حال رشد",
    "tags": [
      "Design System",
      "React",
      "TypeScript",
      "Documentation"
    ],
    "cover": "featured.jpg",
    "body": {
      "raw": "author: Ehsan Pourhadi\nreadingTime: 8 دقیقه مطالعه\nfeatured: true\n---\n# ساخت یک سیستم طراحی از ابتدا\n\nایجاد یک سیستم طراحی یکی از پروژه‌های بسیار پاداش‌دهنده و در عین حال چالش‌برانگیزی است که به عنوان یک توسعه‌دهنده frontend می‌توانید انجام دهید. در اینجا آموخته‌های من در ساخت یکی از این سیستم‌ها از ابتدا را به اشتراک می‌گذارم.\n\n## چرا به یک سیستم طراحی نیاز داشتیم\n\nاستارتاپ ما به سرعت در حال رشد بود و با آن، تیم محصول ما نیز در حال گسترش بود. ما طراحان و توسعه‌دهندگانی داشتیم که بر روی ویژگی‌های مختلف کار می‌کردند، اغلب مؤلفه‌های مشابهی با تفاوت‌های جزئی ایجاد می‌کردند. این موضوع منجر به:\n\n- رابط کاربری ناهمگون\n- کد و تلاش تکراری\n- چرخه‌های توسعه کندتر\n- کابوس‌های نگهداری\n\nواضح بود که ما به یک رویکرد سیستماتیک نیاز داریم.\n\n## مرحله برنامه‌ریزی\n\nقبل از نوشتن هرگونه کد، ما زمان قابل توجهی را برای برنامه‌ریزی صرف کردیم:\n\n### 1. بررسی مؤلفه‌های موجود\nما هر عنصر UI در محصولات ما را کاتالوگ کردیم، الگوها و ناهمگونی‌ها را شناسایی کردیم.\n\n### 2. تعریف توکن‌های طراحی\nما توکن‌های اصلی طراحی خود را تعیین کردیم:\n- رنگ‌ها (اصلی، ثانویه، معنایی)\n- تایپوگرافی (خانواده‌های فونت، اندازه‌ها، وزن‌ها)\n- فاصله‌گذاری (حاشیه‌ها، پدینگ، فاصله‌ها)\n- حاشیه‌ها و سایه‌ها\n- مدت زمان‌ها و رفت و برگشت‌های انیمیشن\n\n### 3. سلسله مراتب مؤلفه\nما مؤلفه‌ها را در سه سطح سازماندهی کردیم:\n- **Atoms**: عناصر اصلی (دکمه‌ها، ورودی‌ها، برچسب‌ها)\n- **Molecules**: ترکیبات ساده (فیلدهای فرم، نوارهای جستجو)\n- **Organisms**: مؤلفه‌های پیچیده (سربرگ‌ها، کارت‌ها، فرم‌ها)\n\n## استراتژی پیاده‌سازی\n\n### انتخاب‌های فناوری\n\nما انتخاب کردیم:\n- **React** با TypeScript برای ایمنی نوع\n- **CSS-in-JS** با styled-components برای استایلینگ پویا\n- **Storybook** برای مستندات و تست\n- **Jest** و Testing Library برای تست‌های واحد\n\n### متغیرهای CSS برای تم\n\nبه جای سخت‌کد کردن مقادیر، ما از ویژگی‌های سفارشی CSS استفاده کردیم:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-primary-hover: #2563eb;\n  --spacing-xs: 0.25rem;\n  --spacing-sm: 0.5rem;\n  --border-radius: 0.375rem;\n}\n```\n\nاین رویکرد پیاده‌سازی تم و حالت تاریک را بسیار آسان‌تر کرد.\n\n### طراحی API مؤلفه\n\nما بر ایجاد API‌های پیش‌بینی‌پذیر و یکنواخت تمرکز کردیم:\n\n```typescript\ninterface ButtonProps {\n  variant?: 'primary' | 'secondary' | 'outline';\n  size?: 'sm' | 'md' | 'lg';\n  disabled?: boolean;\n  loading?: boolean;\n  children: React.ReactNode;\n}\n```\n\n## چالش‌هایی که با آن‌ها روبرو شدیم\n\n### 1. کسب حمایت از تیم‌ها\nهمه به سرعت ارزش آن را ندیدند. ما مجبور شدیم با استفاده از نمونه‌های اولیه منافع را نشان دهیم و تدریجا مؤلفه‌های موجود را مهاجرت دهیم.\n\n### 2. تعادل بین انعطاف‌پذیری در مقابل یکنواختی\nاگر سیستم بیش از حد سخت باشد، توسعه‌دهندگان دور آن کار می‌کنند. اگر بیش از حد انعطاف‌پذیر باشد، شما یکنواختی را از دست می‌دهید. پیدا کردن تعادل مناسب نیاز به تکرار داشت.\n\n### 3. مستندات\nبه‌روزرسانی مستندات بسیار حیاتی است اما اغلب نادیده گرفته می‌شود. ما به حد امکان اتوماسیون ایجاد کردیم و آن را بخشی از فرآیند توسعه خود قرار دادیم.\n\n## نتایج و تأثیر\n\nپس از 6 ماه استفاده تدریجی:\n\n- توسعه مؤلفه **50% سریع‌تر**\n- **کاهش 90%** در ناهمگونی‌های طراحی\n- **دسترسی بهبود یافته** در تمام محصولات\n- **تجربه بهتر توسعه‌دهنده** با پشتیبانی TypeScript\n\n## درس‌های آموخته شده\n\n1. **کوچک ش\n",
      "html": "<h2>author: Ehsan Pourhadi\nreadingTime: 8 دقیقه مطالعه\nfeatured: true</h2>\n<h1>ساخت یک سیستم طراحی از ابتدا</h1>\n<p>ایجاد یک سیستم طراحی یکی از پروژه‌های بسیار پاداش‌دهنده و در عین حال چالش‌برانگیزی است که به عنوان یک توسعه‌دهنده frontend می‌توانید انجام دهید. در اینجا آموخته‌های من در ساخت یکی از این سیستم‌ها از ابتدا را به اشتراک می‌گذارم.</p>\n<h2>چرا به یک سیستم طراحی نیاز داشتیم</h2>\n<p>استارتاپ ما به سرعت در حال رشد بود و با آن، تیم محصول ما نیز در حال گسترش بود. ما طراحان و توسعه‌دهندگانی داشتیم که بر روی ویژگی‌های مختلف کار می‌کردند، اغلب مؤلفه‌های مشابهی با تفاوت‌های جزئی ایجاد می‌کردند. این موضوع منجر به:</p>\n<ul>\n<li>رابط کاربری ناهمگون</li>\n<li>کد و تلاش تکراری</li>\n<li>چرخه‌های توسعه کندتر</li>\n<li>کابوس‌های نگهداری</li>\n</ul>\n<p>واضح بود که ما به یک رویکرد سیستماتیک نیاز داریم.</p>\n<h2>مرحله برنامه‌ریزی</h2>\n<p>قبل از نوشتن هرگونه کد، ما زمان قابل توجهی را برای برنامه‌ریزی صرف کردیم:</p>\n<h3>1. بررسی مؤلفه‌های موجود</h3>\n<p>ما هر عنصر UI در محصولات ما را کاتالوگ کردیم، الگوها و ناهمگونی‌ها را شناسایی کردیم.</p>\n<h3>2. تعریف توکن‌های طراحی</h3>\n<p>ما توکن‌های اصلی طراحی خود را تعیین کردیم:</p>\n<ul>\n<li>رنگ‌ها (اصلی، ثانویه، معنایی)</li>\n<li>تایپوگرافی (خانواده‌های فونت، اندازه‌ها، وزن‌ها)</li>\n<li>فاصله‌گذاری (حاشیه‌ها، پدینگ، فاصله‌ها)</li>\n<li>حاشیه‌ها و سایه‌ها</li>\n<li>مدت زمان‌ها و رفت و برگشت‌های انیمیشن</li>\n</ul>\n<h3>3. سلسله مراتب مؤلفه</h3>\n<p>ما مؤلفه‌ها را در سه سطح سازماندهی کردیم:</p>\n<ul>\n<li><strong>Atoms</strong>: عناصر اصلی (دکمه‌ها، ورودی‌ها، برچسب‌ها)</li>\n<li><strong>Molecules</strong>: ترکیبات ساده (فیلدهای فرم، نوارهای جستجو)</li>\n<li><strong>Organisms</strong>: مؤلفه‌های پیچیده (سربرگ‌ها، کارت‌ها، فرم‌ها)</li>\n</ul>\n<h2>استراتژی پیاده‌سازی</h2>\n<h3>انتخاب‌های فناوری</h3>\n<p>ما انتخاب کردیم:</p>\n<ul>\n<li><strong>React</strong> با TypeScript برای ایمنی نوع</li>\n<li><strong>CSS-in-JS</strong> با styled-components برای استایلینگ پویا</li>\n<li><strong>Storybook</strong> برای مستندات و تست</li>\n<li><strong>Jest</strong> و Testing Library برای تست‌های واحد</li>\n</ul>\n<h3>متغیرهای CSS برای تم</h3>\n<p>به جای سخت‌کد کردن مقادیر، ما از ویژگی‌های سفارشی CSS استفاده کردیم:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-primary-hover: #2563eb;\n  --spacing-xs: 0.25rem;\n  --spacing-sm: 0.5rem;\n  --border-radius: 0.375rem;\n}\n</code></pre>\n<p>این رویکرد پیاده‌سازی تم و حالت تاریک را بسیار آسان‌تر کرد.</p>\n<h3>طراحی API مؤلفه</h3>\n<p>ما بر ایجاد API‌های پیش‌بینی‌پذیر و یکنواخت تمرکز کردیم:</p>\n<pre><code class=\"language-typescript\">interface ButtonProps {\n  variant?: 'primary' | 'secondary' | 'outline';\n  size?: 'sm' | 'md' | 'lg';\n  disabled?: boolean;\n  loading?: boolean;\n  children: React.ReactNode;\n}\n</code></pre>\n<h2>چالش‌هایی که با آن‌ها روبرو شدیم</h2>\n<h3>1. کسب حمایت از تیم‌ها</h3>\n<p>همه به سرعت ارزش آن را ندیدند. ما مجبور شدیم با استفاده از نمونه‌های اولیه منافع را نشان دهیم و تدریجا مؤلفه‌های موجود را مهاجرت دهیم.</p>\n<h3>2. تعادل بین انعطاف‌پذیری در مقابل یکنواختی</h3>\n<p>اگر سیستم بیش از حد سخت باشد، توسعه‌دهندگان دور آن کار می‌کنند. اگر بیش از حد انعطاف‌پذیر باشد، شما یکنواختی را از دست می‌دهید. پیدا کردن تعادل مناسب نیاز به تکرار داشت.</p>\n<h3>3. مستندات</h3>\n<p>به‌روزرسانی مستندات بسیار حیاتی است اما اغلب نادیده گرفته می‌شود. ما به حد امکان اتوماسیون ایجاد کردیم و آن را بخشی از فرآیند توسعه خود قرار دادیم.</p>\n<h2>نتایج و تأثیر</h2>\n<p>پس از 6 ماه استفاده تدریجی:</p>\n<ul>\n<li>توسعه مؤلفه <strong>50% سریع‌تر</strong></li>\n<li><strong>کاهش 90%</strong> در ناهمگونی‌های طراحی</li>\n<li><strong>دسترسی بهبود یافته</strong> در تمام محصولات</li>\n<li><strong>تجربه بهتر توسعه‌دهنده</strong> با پشتیبانی TypeScript</li>\n</ul>\n<h2>درس‌های آموخته شده</h2>\n<ol>\n<li>**کوچک ش</li>\n</ol>"
    },
    "_id": "blog/building-design-system/building-design-system.fa.md",
    "_raw": {
      "sourceFilePath": "blog/building-design-system/building-design-system.fa.md",
      "sourceFileName": "building-design-system.fa.md",
      "sourceFileDir": "blog/building-design-system",
      "contentType": "markdown",
      "flattenedPath": "blog/building-design-system/building-design-system.fa"
    },
    "type": "Blog",
    "slug": "building-design-system",
    "lang": "fa"
  },
  {
    "title": "Building a Design System from Scratch",
    "date": "2024-02-20T00:00:00.000Z",
    "summary": "Lessons learned creating a comprehensive design system for a growing startup",
    "tags": [
      "Design System",
      "React",
      "TypeScript",
      "Documentation"
    ],
    "cover": "featured.jpg",
    "body": {
      "raw": "\n# Building a Design System from Scratch\n\nCreating a design system is one of the most rewarding yet challenging projects you can undertake as a frontend developer. Here's what I learned building one from the ground up.\n\n## Why We Needed a Design System\n\nOur startup was growing rapidly, and with it, our product team. We had designers and developers working on different features, often creating similar components with slight variations. This led to:\n\n- Inconsistent user interfaces\n- Duplicated code and effort\n- Slower development cycles\n- Maintenance nightmares\n\nIt was clear we needed a systematic approach.\n\n## Planning Phase\n\nBefore writing any code, we spent significant time on planning:\n\n### 1. Audit Existing Components\nWe cataloged every UI element across our products, identifying patterns and inconsistencies.\n\n### 2. Define Design Tokens\nWe established our core design tokens:\n- Colors (primary, secondary, semantic)\n- Typography (font families, sizes, weights)\n- Spacing (margins, padding, gaps)\n- Borders and shadows\n- Animation durations and easings\n\n### 3. Component Hierarchy\nWe organized components into three levels:\n- **Atoms**: Basic elements (buttons, inputs, labels)\n- **Molecules**: Simple combinations (form fields, search bars)\n- **Organisms**: Complex components (headers, cards, forms)\n\n## Implementation Strategy\n\n### Technology Choices\n\nWe chose:\n- **React** with TypeScript for type safety\n- **CSS-in-JS** with styled-components for dynamic styling\n- **Storybook** for documentation and testing\n- **Jest** and Testing Library for unit tests\n\n### CSS Variables for Theming\n\nInstead of hardcoding values, we used CSS custom properties:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-primary-hover: #2563eb;\n  --spacing-xs: 0.25rem;\n  --spacing-sm: 0.5rem;\n  --border-radius: 0.375rem;\n}\n```\n\nThis approach made theming and dark mode implementation much easier.\n\n### Component API Design\n\nWe focused on creating consistent, predictable APIs:\n\n```typescript\ninterface ButtonProps {\n  variant?: 'primary' | 'secondary' | 'outline';\n  size?: 'sm' | 'md' | 'lg';\n  disabled?: boolean;\n  loading?: boolean;\n  children: React.ReactNode;\n}\n```\n\n## Challenges We Faced\n\n### 1. Getting Buy-in from Teams\nNot everyone immediately saw the value. We had to demonstrate benefits through prototypes and gradually migrate existing components.\n\n### 2. Balancing Flexibility vs. Consistency\nToo rigid, and developers work around the system. Too flexible, and you lose consistency. Finding the right balance took iterations.\n\n### 3. Documentation\nKeeping documentation up-to-date is crucial but often overlooked. We automated as much as possible and made it part of our development process.\n\n## Results and Impact\n\nAfter 6 months of gradual adoption:\n\n- **50% faster** component development\n- **90% reduction** in design inconsistencies\n- **Improved accessibility** across all products\n- **Better developer experience** with TypeScript support\n\n## Lessons Learned\n\n1. **Start small**: Begin with the most common components\n2. **Involve stakeholders**: Include designers, developers, and product managers\n3. **Document everything**: Good documentation is as important as good code\n4. **Iterate based on feedback**: Be prepared to evolve the system\n5. **Automate where possible**: Use tools to enforce consistency\n\n## What's Next\n\nWe're now working on:\n- Advanced theming capabilities\n- Better mobile-first responsive patterns\n- Integration with design tools like Figma\n- Performance optimizations\n\nBuilding a design system is a journey, not a destination. It requires ongoing maintenance and evolution, but the benefits to team productivity and user experience make it worthwhile.\n\n---\n\n*Have you built a design system? I'd love to hear about your experience. Feel free to reach out on [Twitter](https://twitter.com/ehsanpo) or [LinkedIn](https://linkedin.com/in/ehsanpo).*\n",
      "html": "<h1>Building a Design System from Scratch</h1>\n<p>Creating a design system is one of the most rewarding yet challenging projects you can undertake as a frontend developer. Here's what I learned building one from the ground up.</p>\n<h2>Why We Needed a Design System</h2>\n<p>Our startup was growing rapidly, and with it, our product team. We had designers and developers working on different features, often creating similar components with slight variations. This led to:</p>\n<ul>\n<li>Inconsistent user interfaces</li>\n<li>Duplicated code and effort</li>\n<li>Slower development cycles</li>\n<li>Maintenance nightmares</li>\n</ul>\n<p>It was clear we needed a systematic approach.</p>\n<h2>Planning Phase</h2>\n<p>Before writing any code, we spent significant time on planning:</p>\n<h3>1. Audit Existing Components</h3>\n<p>We cataloged every UI element across our products, identifying patterns and inconsistencies.</p>\n<h3>2. Define Design Tokens</h3>\n<p>We established our core design tokens:</p>\n<ul>\n<li>Colors (primary, secondary, semantic)</li>\n<li>Typography (font families, sizes, weights)</li>\n<li>Spacing (margins, padding, gaps)</li>\n<li>Borders and shadows</li>\n<li>Animation durations and easings</li>\n</ul>\n<h3>3. Component Hierarchy</h3>\n<p>We organized components into three levels:</p>\n<ul>\n<li><strong>Atoms</strong>: Basic elements (buttons, inputs, labels)</li>\n<li><strong>Molecules</strong>: Simple combinations (form fields, search bars)</li>\n<li><strong>Organisms</strong>: Complex components (headers, cards, forms)</li>\n</ul>\n<h2>Implementation Strategy</h2>\n<h3>Technology Choices</h3>\n<p>We chose:</p>\n<ul>\n<li><strong>React</strong> with TypeScript for type safety</li>\n<li><strong>CSS-in-JS</strong> with styled-components for dynamic styling</li>\n<li><strong>Storybook</strong> for documentation and testing</li>\n<li><strong>Jest</strong> and Testing Library for unit tests</li>\n</ul>\n<h3>CSS Variables for Theming</h3>\n<p>Instead of hardcoding values, we used CSS custom properties:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-primary-hover: #2563eb;\n  --spacing-xs: 0.25rem;\n  --spacing-sm: 0.5rem;\n  --border-radius: 0.375rem;\n}\n</code></pre>\n<p>This approach made theming and dark mode implementation much easier.</p>\n<h3>Component API Design</h3>\n<p>We focused on creating consistent, predictable APIs:</p>\n<pre><code class=\"language-typescript\">interface ButtonProps {\n  variant?: 'primary' | 'secondary' | 'outline';\n  size?: 'sm' | 'md' | 'lg';\n  disabled?: boolean;\n  loading?: boolean;\n  children: React.ReactNode;\n}\n</code></pre>\n<h2>Challenges We Faced</h2>\n<h3>1. Getting Buy-in from Teams</h3>\n<p>Not everyone immediately saw the value. We had to demonstrate benefits through prototypes and gradually migrate existing components.</p>\n<h3>2. Balancing Flexibility vs. Consistency</h3>\n<p>Too rigid, and developers work around the system. Too flexible, and you lose consistency. Finding the right balance took iterations.</p>\n<h3>3. Documentation</h3>\n<p>Keeping documentation up-to-date is crucial but often overlooked. We automated as much as possible and made it part of our development process.</p>\n<h2>Results and Impact</h2>\n<p>After 6 months of gradual adoption:</p>\n<ul>\n<li><strong>50% faster</strong> component development</li>\n<li><strong>90% reduction</strong> in design inconsistencies</li>\n<li><strong>Improved accessibility</strong> across all products</li>\n<li><strong>Better developer experience</strong> with TypeScript support</li>\n</ul>\n<h2>Lessons Learned</h2>\n<ol>\n<li><strong>Start small</strong>: Begin with the most common components</li>\n<li><strong>Involve stakeholders</strong>: Include designers, developers, and product managers</li>\n<li><strong>Document everything</strong>: Good documentation is as important as good code</li>\n<li><strong>Iterate based on feedback</strong>: Be prepared to evolve the system</li>\n<li><strong>Automate where possible</strong>: Use tools to enforce consistency</li>\n</ol>\n<h2>What's Next</h2>\n<p>We're now working on:</p>\n<ul>\n<li>Advanced theming capabilities</li>\n<li>Better mobile-first responsive patterns</li>\n<li>Integration with design tools like Figma</li>\n<li>Performance optimizations</li>\n</ul>\n<p>Building a design system is a journey, not a destination. It requires ongoing maintenance and evolution, but the benefits to team productivity and user experience make it worthwhile.</p>\n<hr>\n<p><em>Have you built a design system? I'd love to hear about your experience. Feel free to reach out on <a href=\"https://twitter.com/ehsanpo\">Twitter</a> or <a href=\"https://linkedin.com/in/ehsanpo\">LinkedIn</a>.</em></p>"
    },
    "_id": "blog/building-design-system/building-design-system.md",
    "_raw": {
      "sourceFilePath": "blog/building-design-system/building-design-system.md",
      "sourceFileName": "building-design-system.md",
      "sourceFileDir": "blog/building-design-system",
      "contentType": "markdown",
      "flattenedPath": "blog/building-design-system/building-design-system"
    },
    "type": "Blog",
    "slug": "building-design-system",
    "lang": "en"
  },
  {
    "title": "Building a Design System from Scratch",
    "date": "2024-02-20T00:00:00.000Z",
    "summary": "Lärdomar från att skapa ett omfattande designsystem för en växande startup",
    "tags": [
      "Design System",
      "React",
      "TypeScript",
      "Documentation"
    ],
    "cover": "featured.jpg",
    "body": {
      "raw": "author: Ehsan Pourhadi\nreadingTime: 8 minuters läsning\nfeatured: true\n---\n# Att bygga ett designsystem från grunden\n\nAtt skapa ett designsystem är ett av de mest givande men samtidigt utmanande projekt du kan ta dig an som frontend-utvecklare. Här är vad jag lärde mig när jag byggde ett från grunden.\n\n## Varför vi behövde ett designsystem\n\nVårt startup växte snabbt, och med det, vårt produktteam. Vi hade designers och utvecklare som arbetade med olika funktioner, ofta skapade de liknande komponenter med små variationer. Detta ledde till:\n\n- Inkonsistenta användargränssnitt\n- Duplicerad kod och ansträngning\n- Långsammare utvecklingscykler\n- Underhållsmardrömmar\n\nDet var tydligt att vi behövde en systematisk strategi.\n\n## Planeringsfasen\n\nInnan vi skrev någon kod, spenderade vi mycket tid på planering:\n\n### 1. Granska befintliga komponenter\nVi katalogiserade varje UI-element över våra produkter, identifierade mönster och inkonsekvenser.\n\n### 2. Definiera design tokens\nVi etablerade våra kärndesign tokens:\n- Färger (primär, sekundär, semantisk)\n- Typografi (typsnittsfamiljer, storlekar, vikter)\n- Avstånd (marginaler, padding, luckor)\n- Kanter och skuggor\n- Animationstider och lättnader\n\n### 3. Komponenthierarki\nVi organiserade komponenter i tre nivåer:\n- **Atomer**: Grundläggande element (knappar, inmatningar, etiketter)\n- **Molekyler**: Enkla kombinationer (formulärfält, sökfält)\n- **Organismer**: Komplexa komponenter (headers, kort, formulär)\n\n## Implementeringsstrategi\n\n### Teknologival\n\nVi valde:\n- **React** med TypeScript för typsäkerhet\n- **CSS-in-JS** med styled-components för dynamisk styling\n- **Storybook** för dokumentation och testning\n- **Jest** och Testing Library för enhetstester\n\n### CSS Variabler för teman\n\nIstället för att hårdkoda värden använde vi CSS anpassade egenskaper:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-primary-hover: #2563eb;\n  --spacing-xs: 0.25rem;\n  --spacing-sm: 0.5rem;\n  --border-radius: 0.375rem;\n}\n```\n\nDenna strategi gjorde teman och implementering av mörkt läge mycket enklare.\n\n### Komponent API Design\n\nVi fokuserade på att skapa konsekventa, förutsägbara API:er:\n\n```typescript\ninterface ButtonProps {\n  variant?: 'primary' | 'secondary' | 'outline';\n  size?: 'sm' | 'md' | 'lg';\n  disabled?: boolean;\n  loading?: boolean;\n  children: React.ReactNode;\n}\n```\n\n## Utmaningar vi stötte på\n\n### 1. Att få stöd från teamen\nInte alla såg omedelbart värdet. Vi var tvungna att demonstrera fördelarna genom prototyper och gradvis migrera befintliga komponenter.\n\n### 2. Balansera flexibilitet mot konsekvens\nFör stel, och utvecklare arbetar runt systemet. För flexibel, och du förlorar konsekvens. Att hitta rätt balans krävde iterationer.\n\n### 3. Dokumentation\nAtt hålla dokumentationen uppdaterad är avgörande men ofta förbisedd. Vi automatiserade så mycket som möjligt och gjorde det till en del av vår utvecklingsprocess.\n\n## Resultat och påverkan\n\nEfter 6 månader av gradvis införande:\n\n- **50% snabbare** komponentutveckling\n- **90% minskning** i designinkonsekvenser\n- **Förbättrad tillgänglighet** över alla produkter\n- **Bättre utvecklarupplevelse** med TypeScript-stöd\n\n## Lärdomar\n\n1. **Börja smått**: Börja med de vanligaste komponenterna\n2. **Inkludera intressenter**: Inkludera designers, utvecklare och produktchefer\n3. **Dokumentera allt**: Bra dokumentation är lika viktigt som bra kod\n4. **Iterera baserat på feedback**: Var beredd på att utveckla systemet\n5. **Automatisera där det är möjligt**: Använd verktyg för att upprätthålla konsekvens\n\n## Vad är nästa steg\n\nVi arbetar nu med:\n- Avancerade temafunktioner\n- Bättre mobilförst responsiva mönster\n- Integration med designverktyg som Figma\n- Prestandaoptimeringar\n\nAtt bygga ett designsystem är en resa, inte en destination. Det kräver kontinuerligt underhåll och utveckling, men fördelarna för teamets produktivitet och användarupplevelsen gör det värt det.\n\n---\n\n*Har du byggt ett designsystem? Jag skulle gärna höra om din erfarenhet. Tveka inte att nå ut på [Twitter](https://twitter.com/ehsanpo) eller [LinkedIn](https://linkedin.com/in/ehsanpo).*\n",
      "html": "<h2>author: Ehsan Pourhadi\nreadingTime: 8 minuters läsning\nfeatured: true</h2>\n<h1>Att bygga ett designsystem från grunden</h1>\n<p>Att skapa ett designsystem är ett av de mest givande men samtidigt utmanande projekt du kan ta dig an som frontend-utvecklare. Här är vad jag lärde mig när jag byggde ett från grunden.</p>\n<h2>Varför vi behövde ett designsystem</h2>\n<p>Vårt startup växte snabbt, och med det, vårt produktteam. Vi hade designers och utvecklare som arbetade med olika funktioner, ofta skapade de liknande komponenter med små variationer. Detta ledde till:</p>\n<ul>\n<li>Inkonsistenta användargränssnitt</li>\n<li>Duplicerad kod och ansträngning</li>\n<li>Långsammare utvecklingscykler</li>\n<li>Underhållsmardrömmar</li>\n</ul>\n<p>Det var tydligt att vi behövde en systematisk strategi.</p>\n<h2>Planeringsfasen</h2>\n<p>Innan vi skrev någon kod, spenderade vi mycket tid på planering:</p>\n<h3>1. Granska befintliga komponenter</h3>\n<p>Vi katalogiserade varje UI-element över våra produkter, identifierade mönster och inkonsekvenser.</p>\n<h3>2. Definiera design tokens</h3>\n<p>Vi etablerade våra kärndesign tokens:</p>\n<ul>\n<li>Färger (primär, sekundär, semantisk)</li>\n<li>Typografi (typsnittsfamiljer, storlekar, vikter)</li>\n<li>Avstånd (marginaler, padding, luckor)</li>\n<li>Kanter och skuggor</li>\n<li>Animationstider och lättnader</li>\n</ul>\n<h3>3. Komponenthierarki</h3>\n<p>Vi organiserade komponenter i tre nivåer:</p>\n<ul>\n<li><strong>Atomer</strong>: Grundläggande element (knappar, inmatningar, etiketter)</li>\n<li><strong>Molekyler</strong>: Enkla kombinationer (formulärfält, sökfält)</li>\n<li><strong>Organismer</strong>: Komplexa komponenter (headers, kort, formulär)</li>\n</ul>\n<h2>Implementeringsstrategi</h2>\n<h3>Teknologival</h3>\n<p>Vi valde:</p>\n<ul>\n<li><strong>React</strong> med TypeScript för typsäkerhet</li>\n<li><strong>CSS-in-JS</strong> med styled-components för dynamisk styling</li>\n<li><strong>Storybook</strong> för dokumentation och testning</li>\n<li><strong>Jest</strong> och Testing Library för enhetstester</li>\n</ul>\n<h3>CSS Variabler för teman</h3>\n<p>Istället för att hårdkoda värden använde vi CSS anpassade egenskaper:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-primary-hover: #2563eb;\n  --spacing-xs: 0.25rem;\n  --spacing-sm: 0.5rem;\n  --border-radius: 0.375rem;\n}\n</code></pre>\n<p>Denna strategi gjorde teman och implementering av mörkt läge mycket enklare.</p>\n<h3>Komponent API Design</h3>\n<p>Vi fokuserade på att skapa konsekventa, förutsägbara API:er:</p>\n<pre><code class=\"language-typescript\">interface ButtonProps {\n  variant?: 'primary' | 'secondary' | 'outline';\n  size?: 'sm' | 'md' | 'lg';\n  disabled?: boolean;\n  loading?: boolean;\n  children: React.ReactNode;\n}\n</code></pre>\n<h2>Utmaningar vi stötte på</h2>\n<h3>1. Att få stöd från teamen</h3>\n<p>Inte alla såg omedelbart värdet. Vi var tvungna att demonstrera fördelarna genom prototyper och gradvis migrera befintliga komponenter.</p>\n<h3>2. Balansera flexibilitet mot konsekvens</h3>\n<p>För stel, och utvecklare arbetar runt systemet. För flexibel, och du förlorar konsekvens. Att hitta rätt balans krävde iterationer.</p>\n<h3>3. Dokumentation</h3>\n<p>Att hålla dokumentationen uppdaterad är avgörande men ofta förbisedd. Vi automatiserade så mycket som möjligt och gjorde det till en del av vår utvecklingsprocess.</p>\n<h2>Resultat och påverkan</h2>\n<p>Efter 6 månader av gradvis införande:</p>\n<ul>\n<li><strong>50% snabbare</strong> komponentutveckling</li>\n<li><strong>90% minskning</strong> i designinkonsekvenser</li>\n<li><strong>Förbättrad tillgänglighet</strong> över alla produkter</li>\n<li><strong>Bättre utvecklarupplevelse</strong> med TypeScript-stöd</li>\n</ul>\n<h2>Lärdomar</h2>\n<ol>\n<li><strong>Börja smått</strong>: Börja med de vanligaste komponenterna</li>\n<li><strong>Inkludera intressenter</strong>: Inkludera designers, utvecklare och produktchefer</li>\n<li><strong>Dokumentera allt</strong>: Bra dokumentation är lika viktigt som bra kod</li>\n<li><strong>Iterera baserat på feedback</strong>: Var beredd på att utveckla systemet</li>\n<li><strong>Automatisera där det är möjligt</strong>: Använd verktyg för att upprätthålla konsekvens</li>\n</ol>\n<h2>Vad är nästa steg</h2>\n<p>Vi arbetar nu med:</p>\n<ul>\n<li>Avancerade temafunktioner</li>\n<li>Bättre mobilförst responsiva mönster</li>\n<li>Integration med designverktyg som Figma</li>\n<li>Prestandaoptimeringar</li>\n</ul>\n<p>Att bygga ett designsystem är en resa, inte en destination. Det kräver kontinuerligt underhåll och utveckling, men fördelarna för teamets produktivitet och användarupplevelsen gör det värt det.</p>\n<hr>\n<p><em>Har du byggt ett designsystem? Jag skulle gärna höra om din erfarenhet. Tveka inte att nå ut på <a href=\"https://twitter.com/ehsanpo\">Twitter</a> eller <a href=\"https://linkedin.com/in/ehsanpo\">LinkedIn</a>.</em></p>"
    },
    "_id": "blog/building-design-system/building-design-system.sv.md",
    "_raw": {
      "sourceFilePath": "blog/building-design-system/building-design-system.sv.md",
      "sourceFileName": "building-design-system.sv.md",
      "sourceFileDir": "blog/building-design-system",
      "contentType": "markdown",
      "flattenedPath": "blog/building-design-system/building-design-system.sv"
    },
    "type": "Blog",
    "slug": "building-design-system",
    "lang": "sv"
  }
]